name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    branches:
    - fix/openssl-in-ci
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  # This job is responsible for _creating_ the GitHub release.
  # It creates the release, and publishes some artifacts into it which are used
  # in the `build-release` job.
  #
  # This job runs only once, before the `build-release` jobs.
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    env:
      # Set to force version number, e.g., when no tag exists.
      CRATE_VERSION: TEST-0.0.0
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.CRATE_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "::set-env name=CRATE_VERSION::${GITHUB_REF#refs/tags/}"
          echo "version is: ${{ env.CRATE_VERSION }}"

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.CRATE_VERSION }}
          release_name: ${{ env.CRATE_VERSION }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.CRATE_VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  # This job runs _after_ the `create-release` job, and uses the artifacts that it created.
  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      BIN_NAME: aurrs
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux-gnu, linux-musl, linux-arm-gnueabihf]
        include:
        - build: linux-gnu
          os: ubuntu-18.04
          rust: nightly
          target: x86_64-unknown-linux-gnu
        - build: linux-musl
          os: ubuntu-18.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: linux-arm-gnueabihf
          os: ubuntu-18.04
          rust: nightly
          target: arm-unknown-linux-gnueabihf

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Install packages
      if: matrix.os == 'ubuntu-18.04'
      run: |
        ci/install-packages-ubuntu.sh

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Use Cross
      if: matrix.target != ''
      run: |
        # FIXME: cross no longer includes openssl :(
        # See: https://github.com/rust-embedded/cross/issues/229#issuecomment-590546949
        cargo install --version 0.1.16 cross
        echo "::set-env name=CARGO::cross"
        echo "::set-env name=TARGET_FLAGS::--target ${{ matrix.target }}"
        echo "::set-env name=TARGET_DIR::./target/${{ matrix.target }}"

    - name: Get release download URL
      uses: actions/download-artifact@v1
      with:
        name: artifacts
        path: artifacts

    - name: Set release upload URL and release version
      shell: bash
      run: |
        release_upload_url="$(cat artifacts/release-upload-url)"
        echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
        echo "release upload url: $RELEASE_UPLOAD_URL"
        release_version="$(cat artifacts/release-version)"
        echo "::set-env name=RELEASE_VERSION::$release_version"
        echo "release version: $RELEASE_VERSION"

    - name: Prepare Cross Build Images
      run: |
        docker build -t "aurrs/cross:x86_64-unknown-linux-musl-0.1.16" . -f "ci/Dockerfile.x86_64-unknown-linux-musl"
        docker build -t "aurrs/cross:arm-unknown-linux-gnueabihf-0.1.16" . -f "ci/Dockerfile.arm-unknown-linux-gnueabihf"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}"

    - name: Strip release binary (arm)
      if: matrix.build == 'linux-arm'
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          rustembedded/cross:arm-unknown-linux-gnueabihf \
          arm-linux-gnueabihf-strip \
          /target/arm-unknown-linux-gnueabihf/release/${{ env.BIN_NAME }}

    # FIXME: for some reasons the manpage isn't generated in CI from the build.rs script.
    # So we build it (again?) here too.
    - name: Build archive
      shell: bash
      run: |
        outdir="$(ci/cargo-out-dir.sh "${{ env.TARGET_DIR }}")"
        if [ "${{ matrix.os }}" != "windows-2019" ]; then
          asciidoctor --doctype manpage --backend manpage --destination-dir "$outdir" doc/${{ env.BIN_NAME }}.1.template
        fi
        staging="repgrep-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
        mkdir -p "$staging"/{complete,doc}

        cp {LICENSE-*,CHANGELOG.md,README.md} "$staging/doc/"
        cp "$outdir"/{_${{ env.BIN_NAME }},${{ env.BIN_NAME }}.bash,${{ env.BIN_NAME }}.fish,_${{ env.BIN_NAME }}.ps1} "$staging/complete/"

        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "::set-env name=ASSET::$staging.zip"
        else
          cp "$outdir"/${{ env.BIN_NAME }}.1 "$staging/doc/"
          cp "target/${{ matrix.target }}/release/${{ env.BIN_NAME }}" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "::set-env name=ASSET::$staging.tar.gz"
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
